Modify the double_word function so that it returns the same word repeated twice, followed by the length of the new doubled word. 
For example, double_word("hello") should return hellohello10.

def double_word(word):
  x= word *2
  result = x + str(len(x))
 
  
  return result

print(double_word("hello")) # Should return hellohello10
print(double_word("abc"))   # Should return abcabc6
print(double_word(""))      # Should return 0
***********************************************************
Modify the first_and_last function so that it returns True if the first letter of the string is the same
 as the last letter of the string, False if they’re different. Remember that you can access characters using message[0] or message[-1]. Be careful 
how you handle the empty string, which should return True since nothing is equal to nothing.

def first_and_last(message):
  
  x = message
  
  if not x or x[0] == x[-1]:
    return True
  return False

print(first_and_last("else"))
print(first_and_last("tree"))
print(first_and_last(""))
*********************************************
Using the index method, find out the position of "x" in "supercalifragilisticexpialidocious". 

word = "supercalifragilisticexpialidocious"
print(word.index("x"))

***********************************************

CHANGE DOMAIN
def replace_domain(email, old_domain, new_domain):
	if "@" + old_domain in email:
		index = email.index("@" + old_domain)
		new_email = email[:index] + "@" + new_domain
		return new_email
	return email

********************************************

Fill in the gaps in the initials function so that it returns the initials of the words contained in the phrase
 received, in upper case. For example: "Universal Serial Bus" should return "USB"; "local area network" should
 return "LAN”. 

def initials(phrase):
    words = phrase.split()
    result = ""
    for word in words:
        result += word[0].join(word[0])
    return result.upper()

print(initials("Universal Serial Bus")) # Should be: USB
print(initials("local area network")) # Should be: LAN
print(initials("Operating system")) # Should be: OS
****************************************************************

name = "Manny"
number = len(name) * 3
print("Hello {}, your lucky number is {}".format(name, number))

print("Your lucky number is {number}, {name}.".format(name=name, number=len(name)*3))

***********************************************************
Modify the student_grade function using the format method, so that it returns the phrase "X received Y% on 
the exam". For example, student_grade("Reed", 80) should return "Reed received 80% on the exam".

def student_grade(name, grade):
	return "{name} received {grade}% on the exam".format(name=name, grade=grade)

print(student_grade("Reed", 80))
print(student_grade("Paige", 92))
print(student_grade("Jesse", 85))

************************************************************************
USING FORMAT 

price = 7.5
with_tax = price * 1.09
print(price, with_tax)

print("Base price: ${:.2f}. With Tax: ${:.2f}".format(price, with_tax))

****ANOTHER EXAMPLE WITH FORMAT

def to_celsius(x):
	return (x-32)*5/9
for x in range(0, 101, 10):
	print("{:>3} F | {:>6.2f} C".format(x, to_celsius(x)))
******************************************************************

String Reference Cheat Sheet
In Python, there are a lot of things you can do with strings. In this cheat sheet, you’ll find the most common string operations and string methods.
String operations
len(string) Returns the length of the string
for character in string Iterates over each character in the string
if substring in string Checks whether the substring is part of the string
string[i] Accesses the character at index i of the string, starting at zero
string[i:j] Accesses the substring starting at index i, ending at index j-1. If i is omitted, it's 0 by default. If j is omitted, it's len(string) by default.
String methods
string.lower() / string.upper() Returns a copy of the string with all lower / upper case characters
string.lstrip() / string.rstrip() / string.strip() Returns a copy of the string without left / right / left or right whitespace
string.count(substring) Returns the number of times substring is present in the string
string.isnumeric() Returns True if there are only numeric characters in the string. If not, returns False.
string.isalpha() Returns True if there are only alphabetic characters in the string. If not, returns False.
string.split() / string.split(delimiter) Returns a list of substrings that were separated by whitespace / delimiter
string.replace(old, new) Returns a new string where all occurrences of old have been replaced by new.
delimiter.join(list of strings) Returns a new string with all the strings joined by the delimiter 
Check out the official documentation for all available String methods. 

*******************************************************
Formatting Strings Cheat Sheet
Python offers different ways to format strings. In the video, we explained the format() method. In this reading, we'll highlight three different ways of formatting strings. For this course you only need to know the format() method. But on the internet, you might find any of the three, so it's a good idea to know that the others exist.
Using the format() method
The format method returns a copy of the string where the {} placeholders have been replaced with the values of the variables. These variables are converted to strings if they weren't strings already. Empty placeholders are replaced by the variables passed to format in the same order.
# "base string with {} placeholders".format(variables)

example = "format() method"

formatted_string = "this is an example of using the {} on a string".format(example)

print(formatted_string)

"""Outputs:
this is an example of using the format() method on a string
"""

If the placeholders indicate a number, they’re replaced by the variable corresponding to that order (starting at zero).

# "{0} {1}".format(first, second)

first = "apple"
second = "banana"
third = "carrot"

formatted_string = "{0} {2} {1}".format(first, second, third)

print(formatted_string)

"""Outputs:
apple carrot banana
"""

If the placeholders indicate a field name, they’re replaced by the variable corresponding to that field name. This means that parameters to format need to be passed indicating the field name.

# "{var1} {var2}".format(var1=value1, var2=value2)

"{:exp1} {:exp2}".format(value1, value2)

If the placeholders include a colon, what comes after the colon is a formatting expression. See below for the expression reference.

# {:d} integer value
'{:d}'.format(10.5) → '10'

Formatting expressions

{:d}
integer value
'{:d}'.format(10.5) → '10'
{:.2f}
floating point with that many decimals
'{:.2f}'.format(0.5) → '0.50'
{:.2s}
string with that many characters
'{:.2s}'.format('Python') → 'Py'
{:<6s}
string aligned to the left that many spaces
'{:<6s}'.format('Py') → 'Py    '
{:>6s}
string aligned to the right that many spaces
'{:<6s}'.format('Py') → '    Py'
{:^6s}
string centered in that many spaces
'{:<6s}'.format('Py') → '  Py '


*******************************************************************


Question 2
Using the format method, fill in the gaps in the convert_distance function so that it returns the phrase "X miles equals Y km", 
with Y having only 1 decimal place. For example, convert_distance(12) should return "12 miles equals 19.2 km".

def convert_distance(miles):
	km = miles * 1.6 
	result = "{} miles equals {:.1f} km".format(miles, km)
	return result

print(convert_distance(12)) # Should be: 12 miles equals 19.2 km
print(convert_distance(5.5)) # Should be: 5.5 miles equals 8.8 km
print(convert_distance(11)) # Should be: 11 miles equals 17.6 km

*********************************************************************


Question 4
Fill in the gaps in the nametag function so that it uses the format method to return first_name and the first initial of last_name followed by a period. For example, nametag("Jane", "Smith") should return "Jane S."

def nametag(first_name, last_name):
	return("{} {:.1s}.".format(first_name, last_name))

print(nametag("Jane", "Smith")) 
# Should display "Jane S." 
print(nametag("Francesco", "Rinaldi")) 
# Should display "Francesco R." 
print(nametag("Jean-Luc", "Grand-Pierre")) 
# Should display "Jean-Luc G." 

************************************************************************
The replace_ending function replaces the old string in a sentence with the new string, but only if the sentence ends with the old string. 
If there is more than one occurrence of the old string in the sentence, only the one at the end is replaced, not all of them. For example, 
replace_ending("abcabc", "abc", "xyz") should return abcxyz, not xyzxyz or xyzabc. The string comparison is case-sensitive, 
so replace_ending("abcabc", "ABC", "xyz") should return abcabc (no changes made). 

def replace_ending(sentence, old, new):
	# Check if the old string is at the end of the sentence 
	if sentence.endswith(old):
		# Using i as the slicing index, combine the part
		# of the sentence up to the matched string at the 
		# end with the new string
		i = sentence.rindex(old)
		new_sentence = sentence[:i] + new
		return new_sentence

	# Return the original sentence if there is no match 
	return sentence
	
print(replace_ending("It's raining cats and cats", "cats", "dogs")) 
# Should display "It's raining cats and dogs"
print(replace_ending("She sells seashells by the seashore", "seashells", "donuts")) 
# Should display "She sells seashells by the seashore"
print(replace_ending("The weather is nice in May", "may", "april")) 
# Should display "The weather is nice in May"
print(replace_ending("The weather is nice in May", "May", "April")) 
# Should display "The weather is nice in April"



****************************************************************************
The is_palindrome function checks if a string is a palindrome. A palindrome is a string that can be equally read from left to right or right to left, 
omitting blank spaces, and ignoring capitalization. Examples of palindromes are words like kayak and radar, and phrases like "Never Odd or Even". 
Fill in the blanks in this function to return True if the passed string is a palindrome, False if not.

def is_palindrome(input_string):
	# We'll create two strings, to compare them
	new_string = ""
	reverse_string = ""
	# Traverse through each letter of the input string
	
	for x in input_string:
		# Add any non-blank letters to the 
		# end of one string, and to the front
		# of the other string. 
		#if :
			new_string = new_string + x.strip()
			reverse_string = x.strip() + reverse_string
	# Compare the strings
	if new_string.lower() == reverse_string.lower():
		return True
	return False

print(is_palindrome("Never Odd or Even")) # Should be True
print(is_palindrome("abc")) # Should be False
print(is_palindrome("kayak")) # Should be True




*************************************************************************

LISTS

Using the "split" string method from the preceding lesson, complete the get_word function to return the {n}th word
 from a passed sentence. For example, get_word("This is a lesson about lists", 4) should return "lesson", 
which is the 4th word in this sentence. Hint: remember that list indexes start at 0, not 1. 

def get_word(sentence, n):
	# Only proceed if n is positive 
	if n > 0:
		words = sentence.split()
		# Only proceed if n is not more than the number of words 
		if n <= len(words):
			return(words[n-1])
	return("")

print(get_word("This is a lesson about lists", 4)) # Should print: lesson
print(get_word("This is a lesson about lists", -4)) # Nothing
print(get_word("Now we are cooking!", 1)) # Should print: Now
print(get_word("Now we are cooking!", 5)) # Nothing

**********************************************************************************************
The group_list function accepts a group name and a list of members, and returns a string with the format: 
group_name: member1, member2, … For example, group_list("g", ["a","b","c"]) returns "g: a, b, c". Fill in the gaps in this function to do that.

def group_list(group, users):
  members = group + ": " + ", ".join(users)
  return members

print(group_list("Marketing", ["Mike", "Karen", "Jake", "Tasha"])) # Should be "Marketing: Mike, Karen, Jake, Tasha"
print(group_list("Engineering", ["Kim", "Jay", "Tom"])) # Should be "Engineering: Kim, Jay, Tom"
print(group_list("Users", "")) # Should be "Users:"
***************************************************************************

The skip_elements function returns a list containing every other element from an input list, starting with 
the first element. Complete this function to do that, using the for loop to iterate through the input list.

def skip_elements(elements):
	# Initialize variables
	new_list = []
	i = 0

	# Iterate through the list
	for i in elements[0::2]:
		# Does this element belong in the resulting list?
		if i in elements:
			# Add this element to the resulting list
			new_list.append(i)
		# Increment i
		i += i

	return new_list

print(skip_elements(["a", "b", "c", "d", "e", "f", "g"])) # Should be ['a', 'c', 'e', 'g']
print(skip_elements(['Orange', 'Pineapple', 'Strawberry', 'Kiwi', 'Peach'])) # Should be ['Orange', 'Strawberry', 'Peach']
print(skip_elements([])) # Should be []

*****************************************************************************
TUPLES

def convert_seconds(seconds):
	hours = seconds // 3600
	minutes = (seconds - hours * 3600) // 60
	remaining_seconds = seconds - hours * 3600 - minutes * 60
	return hours, minutes, remaining_seconds

result = convert_seconds(5000)

hours, minutes, seconds = result
print(hours, minutes, seconds)

hours, minutes, seconds = convert_seconds(1000)
print(hours, minutes, seconds)

type(result)
print(result)

****************************************************
Let's use tuples to store information about a file: its name, its type and its size in bytes. 
Fill in the gaps in this code to return the size in kilobytes (a kilobyte is 1024 bytes) up to 2 decimal places.

def file_size(file_info):
	file_name, file_type, size_bytes = file_info
	return("{:.2f}".format(size_bytes / 1024))

print(file_size(('Class Assignment', 'docx', 17875))) # Should print 17.46
print(file_size(('Notes', 'txt', 496))) # Should print 0.48
print(file_size(('Program', 'py', 1239))) # Should print 1.21


**********************************************************************************************
0.01 Try out the enumerate function for yourself in this quick exercise. Complete the skip_elements function to return every other element from the list, 
this time using the enumerate function to check if an element is on an even position or an odd position.

def skip_elements(elements):
	# code goes here
  new_list = []
  i = 0

        # Iterate through the list
  for i in elements[0::2]:
            # Does this element belong in the resulting list?
	    # use enumerate function

    if enumerate(elements, start=0):
                # Add this element to the resulting list
      new_list.append(i)
            # Increment i
    i += i

  return new_list

print(skip_elements(["a", "b", "c", "d", "e", "f", "g"])) # Should be ['a', 'c', 'e', 'g']
print(skip_elements(['Orange', 'Pineapple', 'Strawberry', 'Kiwi', 'Peach'])) # Should be ['Orange', 'Strawberry', 'Peach']



************************************************************************************
animals = ["Lion", "Zebra", "Dolphin", "Monkey"]
chars = 0
for animal in animals:
	chars += len(animal)
print("Total characters: {}, Average length: {}".format(chars, chars/len(animals)))

*******************************************************************************************************
ENUMERATE FUNCTION

EXAMPLE:

winners = ["Ashley", "Dylan", "Reese"]
for index, person in enumerate(winners):
	print("{} - {}".format(index + 1, person))

***********************
def full_emails(people):
	result = []
	for email, name in people:
	  result.append("{} <{}>".format(name, email))
	return result

print(full_emails(["alex@example.com", "Aelx Diego"),
...""shay@example.com", "Shay Brandt")]))
********************************************************

LIST COMPREHENSIONS

multiples = []
for x in range(1, 11):
	multiples.append(x*7)
print(multiples)

ANOTHER WAY OF DOING THE SAME

multiples = [x*7 for x in range(1, 11)]
print(multiples)

****************************************************
languages = ["Python", "Perl", "Ruby", "Go", "Java", "C"]
lengths = [len(language) for language in language in languages]
print(lengths)

z = [x for x in range(0, 101) if x % 3 == 0]
print(z)

********************************************************
The odd_numbers function returns a list of odd numbers between 1 and n, inclusively. 
Fill in the blanks in the function, using list comprehension. Hint: remember that list and 
range counters start at 0 and end at the limit minus 1.
 
def odd_numbers(n):
	return [x for x in range(0, n+1) if x % 2]

print(odd_numbers(5))  # Should print [1, 3, 5]
print(odd_numbers(10)) # Should print [1, 3, 5, 7, 9]
print(odd_numbers(11)) # Should print [1, 3, 5, 7, 9, 11]
print(odd_numbers(1))  # Should print [1]
print(odd_numbers(-1)) # Should print []

**********************************************************************
LISTS QUIZ

Given a list of filenames, we want to rename all the files with extension hpp to the extension h. 
To do this, we would like to generate a new list called newfilenames, consisting of the new filenames. 
Fill in the blanks in the code using any of the methods you’ve learned thus far, like a for loop or a list 
comprehension.

filenames = ["program.c", "stdio.hpp", "sample.hpp", "a.out", "math.hpp", "hpp.out"]
# Generate newfilenames as a list containing the new filenames
# using as many lines of code as your chosen method requires.
newfilenames = [x.replace(".hpp", ".h") for x in filenames]

print(newfilenames) 
# Should be ["program.c", "stdio.h", "sample.h", "a.out", "math.h", "hpp.out"]
*************************************************************************************

Question 2
Let's create a function that turns text into pig latin: a simple text transformation that modifies each word 
moving the first character to the end and appending "ay" to the end. For example, python ends up as ythonpay.

def pig_latin(text):
  say = " "
  # Separate the text into words
  words = []
  for word in text.split():
    # Create the pig latin word and add it to the list
    words.append(word[1:] + word[0] + "ay")
    # Turn the list back into a phrase
  return say.join(words)
		
print(pig_latin("hello how are you")) # Should be "ellohay owhay reaay ouyay"
print(pig_latin("programming in python is fun")) # Should be "rogrammingpay niay ythonpay siay unfay"

**************************************************************************
The guest_list function reads in a list of tuples with the name, age, and profession of each party guest, and prints the sentence 
"Guest is X years old and works as __." for each one. For example, guest_list(('Ken', 30, "Chef"), ("Pat", 35, 'Lawyer'), ('Amanda', 25, "Engineer")) 
should print out: Ken is 30 years old and works as Chef. Pat is 35 years old and works as Lawyer. Amanda is 25 years old and works as Engineer. 
Fill in the gaps in this function to do that. 

def guest_list(guests):
	for person in guests:
		name, age, profession = person
		print("{} is {} years old and works as {}".format(name, age, profession))

guest_list([('Ken', 30, "Chef"), ("Pat", 35, 'Lawyer'), ('Amanda', 25, "Engineer")])
******************************************************************************************
                          **PENDIENTE**
The permissions of a file in a Linux system are split into three sets of three permissions: read, write, and execute for the owner, group, and others. 
Each of the three values can be expressed as an octal number summing each permission, with 4 corresponding to read, 2 to write, and 1 to execute. 
Or it can be written with a string using the letters r, w, and x or - when the permission is not granted. For example: 640 is read/write for the owner, 
read for the group, and no permissions for the others; converted to a string, it would be: "rw-r-----" 755 is read/write/execute for the owner, 
and read/execute for group and others; converted to a string, it would be: "rwxr-xr-x" Fill in the blanks to make the code convert a permission in octal 
format into a string format. 

def octal_to_string(octal):
    result = ""
    value_letters = [(4,"r"),(2,"w"),(1,"x")]
    # Iterate over each of the digits in octal
    for digit in [int(n) for n in str(octal)]:
        # Check for each of the permissions values
        for value, letter in value_letters:
            if digit >= value:
                result += letter
                digit -= value
            else:
              result = "-".join(result)
    return result
    
print(octal_to_string(755)) # Should be rwxr-xr-x
print(octal_to_string(644)) # Should be rw-r--r--
print(octal_to_string(750)) # Should be rwxr-x---
print(octal_to_string(600)) # Should be rw-------

************************************************************************

DICTIONARIES

file_counts = {"jpg":10, "txt":14, "csv":2, "py":23}
print(file_counts)

file_counts["txt"] ------------------> 14

"jpg" in file_counts ----------> True
"html" in file_counts ---------> False

file_counts["cfg"] = 8
print(file_counts)

file_counts["csv"] = 17 
print(file_counts)

del file_counts["cfg"]
print(file_counts)
*****************************************************
The "toc" dictionary represents the table of contents for a book. Fill in the blanks to do the following: 
1) Add an entry for Epilogue on page 39. 2) Change the page number for Chapter 3 to 24. 
3) Display the new dictionary contents. 4) Display True if there is Chapter 5, False if there isn't.

toc = {"Introduction":1, "Chapter 1":4, "Chapter 2":11, "Chapter 3":25, "Chapter 4":30}
toc["Epilogue"] = 39 # Epilogue starts on page 39
toc["Chapter 3"] = 24 # Chapter 3 now starts on page 24
print(toc) # What are the current contents of the dictionary?

print("Chapter 5" in toc) # Is there a Chapter 5?
*******************************************************
file_counts = {"jpg":10, "txt":14, "csv":2, "py":23}
for extension in file_counts:
	print(extension)

for ext, amount in file_counts.items():
	print("There are {} files with the .{} extension".format(amount, ext))

file_counts.keys()
file_counts.values()

for value in file_counts.values():
	print(value)
*******************************************************
for loop to iterate in a dictionary

toc = {"Introduction":1, "Chapter 1":4, "Chapter 2":11, "Chapter 3":25, "Chapter 4":30}
for x in toc:
  print(x)

for ext, amount in toc.items():
	print("There are {} files with the .{} extension".format(amount, ext))

toc.keys()
toc.values()

for value in toc.values():
	print(value)
****************************************************************

Complete the code to iterate through the keys and values of the cool_beasts dictionary. 
Remember that the items method returns a tuple of key, value for each element in the dictionary. 

cool_beasts = {"octopuses":"tentacles", "dolphins":"fins", "rhinos":"horns"}
for k, v in cool_beasts.items():
    print("{} have {}".format(k, v))
*****************************************************************
def count_letters(text):
	result = {}
	for letter in text:
		if letter not in result:
			result[letter] = 0
		result[letter] += 1
	return result

count_letters("aaaaa")
count_letters("tenant")
count_letters("a long string with a lot of letters")

******************************************************************

In Python, a dictionary can only hold a single value for a given key. To workaround this, our single value can 
be a list containing multiple values. Here we have a dictionary called "wardrobe" with items of clothing and 
their colors. Fill in the blanks to print a line for each item of clothing with each color, for example: 
"red shirt", "blue shirt", and so on.

Warning message: Not quite. Remember that we first want to iterate through
the elements of the dictionary and then through the elements
of the list.

wardrobe = {"shirt":["red","blue","white"], "jeans":["blue","black"]}
for k in wardrobe.keys():
	for v in wardrobe.get(k):
		print("{} {}".format(v, k))

**********************************************************
Dictionary Methods Cheat Sheet
Definition
x = {key1:value1, key2:value2} 
Operations
len(dictionary) - Returns the number of items in the dictionary
for key in dictionary - Iterates over each key in the dictionary
for key, value in dictionary.items() - Iterates over each key,value pair in the dictionary
if key in dictionary - Checks whether the key is in the dictionary
dictionary[key] - Accesses the item with key key of the dictionary
dictionary[key] = value - Sets the value associated with key
del dictionary[key] - Removes the item with key key from the dictionary
Methods
dict.get(key, default) - Returns the element corresponding to key, or default if it's not present
dict.keys() - Returns a sequence containing the keys in the dictionary
dict.values() - Returns a sequence containing the values in the dictionary
dict.update(other_dictionary) - Updates the dictionary with the items coming from the other dictionary. Existing entries will be replaced; new entries will be added.
dict.clear() - Removes all the items of the dictionary
*********************************************************************
1.Question 1
The email_list function receives a dictionary, which contains domain names as keys, and a list of users as values. Fill in the blanks to generate a list that contains complete email addresses (e.g. diana.prince@gmail.com).

def email_list(domains):
	emails = []
	for users in domains.keys():
	  for user in domains.get(users):
	    emails.append(user + "@" + users)
	return(emails)

print(email_list({"gmail.com": ["clark.kent", "diana.prince", "peter.parker"], "yahoo.com": ["barbara.gordon", "jean.grey"], "hotmail.com": ["bruce.wayne"]}))

**************************************************************
5.Question 5
The add_prices function returns the total price of all of the groceries in the dictionary. Fill in the blanks to complete this function.

def add_prices(basket):
	# Initialize the variable that will be used for the calculation
	total = 0
	# Iterate through the dictionary items
	for k in basket.keys():
		# Add each price to the total calculation
		# Hint: how do you access the values of
		# dictionary items?
		total += basket.get(k)
	# Limit the return value to 2 decimal places
	return round(total, 2)  

groceries = {"bananas": 1.56, "apples": 2.50, "oranges": 0.99, "bread": 4.59, 
	"coffee": 6.99, "milk": 3.39, "eggs": 2.98, "cheese": 5.44}

print(add_prices(groceries)) # Should print 28.44
*********************************************************************
The groups_per_user function receives a dictionary, which contains group names with the list of users. Users can belong to multiple groups. Fill in the blanks to return a dictionary with the users as keys and a list of their groups as values. 

def groups_per_user(group_dictionary):
	user_groups = {}
	# Go through group_dictionary
	for ___:
		# Now go through the users in the group
		for ___:
			# Now add the group to the the list of
# groups for this user, creating the entry
# in the dictionary if necessary

	return(user_groups)

print(groups_per_user({"local": ["admin", "userA"],
		"public":  ["admin", "userB"],
		"administrator": ["admin"] }))

******************************************************************************
DICTIONARY QUIZ

2.
Question 2
The highlight_word function changes the given word in a sentence to its upper-case version. For example, highlight_word("Have a nice day", "nice") returns "Have a NICE day". Can you write this function in just one line?

def highlight_word(sentence, word):
	return(sentence.replace(str(word), str(word.upper())))

print(highlight_word("Have a nice day", "nice"))
print(highlight_word("Shhh, don't be so loud!", "loud"))
print(highlight_word("Automating with Python is fun", "fun"))

********************************************************************
3.
Question 3
A professor with two assistants, Jamie and Drew, wants an attendance list of the students, in the order that they arrived in the classroom. Drew was the first one to note which students arrived, and then Jamie took over. After the class, they each entered their lists into the computer and emailed them to the professor, who needs to combine them into one, in the order of each student's arrival. Jamie emailed a follow-up, saying that her list is in reverse order. Complete the steps to combine them into one list as follows: the contents of Drew's list, followed by Jamie's list in reverse order, to get an accurate list of the students as they arrived.

def combine_lists(list1, list2):
  list1.reverse()
  list3 = list2 + list1
  return list3
  # Generate a new list containing the elements of list2
  # Followed by the elements of list1 in reverse order
  
	
Jamies_list = ["Alice", "Cindy", "Bobby", "Jan", "Peter"]
Drews_list = ["Mike", "Carol", "Greg", "Marcia"]

print(combine_lists(Jamies_list, Drews_list))

****************************************************************
4.
Question 4
Use a list comprehension to create a list of squared numbers (n*n). The function receives the variables start and end, and returns a list of squares of consecutive numbers between start and end inclusively.
For example, squares(2, 3) should return [4, 9].

def squares(start, end):
	return [x*x for x in range(start, end+1)]

print(squares(2, 3)) # Should be [4, 9]
print(squares(1, 5)) # Should be [1, 4, 9, 16, 25]
print(squares(0, 10)) # Should be [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

*********************************************************************************
5.
Question 5
Complete the code to iterate through the keys and values of the car_prices dictionary, printing out some information about each one.

def car_listing(car_prices):
  result = ""
  for i, j in car_prices.items():
    result += "{} costs {} dollars".format(i, j) + "\n"
  return result

print(car_listing({"Kia Soul":19000, "Lamborghini Diablo":55000, "Ford Fiesta":13000, "Toyota Prius":24000}))

******************************************************************************************************************
















